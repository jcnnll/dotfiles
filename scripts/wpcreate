#!/bin/sh
# vim: filetype=sh

# -------- Colors --------
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
NONE=$(tput sgr0)

# -------- Preflight Checks --------
for cmd in php composer curl ddev wp; do
    if ! command -v $cmd >/dev/null; then
        echo "${RED}Required command '$cmd' not found. Please install it before continuing.${NONE}"
        exit 1
    fi
done

if ! command -v limactl >/dev/null; then
    echo "${RED}'limactl' not found. Lima is required for Docker on macOS without Docker Desktop.${NOME}"
    exit 1
fi

export DOCKER_HOST=unix:///Users/jay/.lima/docker/sock/docker.sock

set -e

# -------- Docker via Lima Setup (Self-healing) --------
LIMA_PROFILE="docker"
LIMA_DOCKER_SOCKET="$HOME/.lima/${LIMA_PROFILE}/sock/docker.sock"

if ! docker info >/dev/null 2>&1; then
    echo "${YELLOW}Docker not responding. Attempting to use Lima profile: $LIMA_PROFILE${NONE}"

    if ! limactl list | grep -q "^$LIMA_PROFILE.*Running"; then
        echo "Starting Lima profile: $LIMA_PROFILE"
        limactl start "$LIMA_PROFILE" || {
            echo "${RED}Failed to start Lima profile '$LIMA_PROFILE'.${NONE}"
                exit 1
            }
        sleep 2
    fi

    if [ -S "$LIMA_DOCKER_SOCKET" ]; then
        export DOCKER_HOST="unix://$LIMA_DOCKER_SOCKET"
        echo "${YELLOW}Using Lima Docker socket: $DOCKER_HOST${NONE}"

        if ! docker info >/dev/null 2>&1; then
            echo "${RED}Docker still not responding after setting DOCKER_HOST.${NONE}"
            exit 1
        fi
    else
        echo "${RED}Lima Docker socket not found: $LIMA_DOCKER_SOCKET${NONE}"
        exit 1
    fi
fi

PROJECTS_PATH="$HOME/sites"

# -------- Functions --------

generate_keys() {
    curl -s https://api.wordpress.org/secret-key/1.1/salt/ | \
    awk -F"[(')]+" '/define/ {
        gsub(/\047/, "\\047", $4);  # escape single quotes
        printf "%s=\"%s\"\n", $2, $4
    }'
}

to_title_case() {
    echo "$1" | sed -E 's/-/ /g; s/\b(.)/\u\1/g'
}

create_env_file() {
    local project="$1"
    local url="https://${project}.ddev.site"
    cat > .env <<EOF
DB_NAME='db'
DB_USER='db'
DB_PASSWORD='db'
DB_HOST='db'

WP_ENV='development'
WP_HOME='${url}'
WP_SITEURL="\${WP_HOME}/wp"

$(generate_keys)
EOF
}

add_post_start_hook() {
    local project="$1"
    local title
    title=$(to_title_case "$project")
    local url="https://${project}.ddev.site"
    cat >> .ddev/config.yaml <<EOF

hooks:
  post-start:
    - exec: |
        RETRIES=5
        until wp core is-installed --path=web/wp || [ \$RETRIES -le 0 ]; do
          sleep 3
          RETRIES=\$((RETRIES - 1))
        done

        if ! wp core is-installed; then
          wp core install \\
            --url="${url}" \\
            --title="${title}" \\
            --admin_user=admin \\
            --admin_password=admin \\
            --admin_email=admin@example.com \\
            --skip-email \\
            --path=web/wp
        fi

        wp rewrite structure '/%postname%/' --hard
        wp rewrite flush --hard
EOF
}

create_project() {
    local project="$1"

    echo "${YELLOW}Creating Bedrock project: ${project}${NONE}"

    cd "$PROJECTS_PATH"
    composer create-project --no-plugins roots/bedrock "$project"
    cd "$project"

    create_env_file "$project"
    ddev config --project-type=wordpress --docroot=web --create-docroot

    add_post_start_hook "$project"
    composer install

    ddev start
    ddev auth ssh

    echo "${GREEN}âœ” Project '${project}' created and started.${NONE}"
    echo "${GREEN}URL: https://${project}.ddev.site${NONE}"
}

# -------- Main --------

if [ -z "$1" ]; then
    echo "${RED}Usage: wpcreate <project-name>.${NONE}"
    exit 1
fi

create_project "$1"
